/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.master_pb.AssignRequest', null, global);
goog.exportSymbol('proto.master_pb.AssignResponse', null, global);
goog.exportSymbol('proto.master_pb.Collection', null, global);
goog.exportSymbol('proto.master_pb.CollectionDeleteRequest', null, global);
goog.exportSymbol('proto.master_pb.CollectionDeleteResponse', null, global);
goog.exportSymbol('proto.master_pb.CollectionListRequest', null, global);
goog.exportSymbol('proto.master_pb.CollectionListResponse', null, global);
goog.exportSymbol('proto.master_pb.DataCenterInfo', null, global);
goog.exportSymbol('proto.master_pb.DataNodeInfo', null, global);
goog.exportSymbol('proto.master_pb.Empty', null, global);
goog.exportSymbol('proto.master_pb.GetMasterConfigurationRequest', null, global);
goog.exportSymbol('proto.master_pb.GetMasterConfigurationResponse', null, global);
goog.exportSymbol('proto.master_pb.Heartbeat', null, global);
goog.exportSymbol('proto.master_pb.HeartbeatResponse', null, global);
goog.exportSymbol('proto.master_pb.KeepConnectedRequest', null, global);
goog.exportSymbol('proto.master_pb.ListMasterClientsRequest', null, global);
goog.exportSymbol('proto.master_pb.ListMasterClientsResponse', null, global);
goog.exportSymbol('proto.master_pb.Location', null, global);
goog.exportSymbol('proto.master_pb.LookupEcVolumeRequest', null, global);
goog.exportSymbol('proto.master_pb.LookupEcVolumeResponse', null, global);
goog.exportSymbol('proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation', null, global);
goog.exportSymbol('proto.master_pb.LookupVolumeRequest', null, global);
goog.exportSymbol('proto.master_pb.LookupVolumeResponse', null, global);
goog.exportSymbol('proto.master_pb.LookupVolumeResponse.VolumeIdLocation', null, global);
goog.exportSymbol('proto.master_pb.RackInfo', null, global);
goog.exportSymbol('proto.master_pb.StatisticsRequest', null, global);
goog.exportSymbol('proto.master_pb.StatisticsResponse', null, global);
goog.exportSymbol('proto.master_pb.StorageBackend', null, global);
goog.exportSymbol('proto.master_pb.StorageType', null, global);
goog.exportSymbol('proto.master_pb.SuperBlockExtra', null, global);
goog.exportSymbol('proto.master_pb.SuperBlockExtra.ErasureCoding', null, global);
goog.exportSymbol('proto.master_pb.TopologyInfo', null, global);
goog.exportSymbol('proto.master_pb.VolumeEcShardInformationMessage', null, global);
goog.exportSymbol('proto.master_pb.VolumeInformationMessage', null, global);
goog.exportSymbol('proto.master_pb.VolumeListRequest', null, global);
goog.exportSymbol('proto.master_pb.VolumeListResponse', null, global);
goog.exportSymbol('proto.master_pb.VolumeLocation', null, global);
goog.exportSymbol('proto.master_pb.VolumeShortInformationMessage', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.Heartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.Heartbeat.repeatedFields_, null);
};
goog.inherits(proto.master_pb.Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.Heartbeat.displayName = 'proto.master_pb.Heartbeat';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.Heartbeat.repeatedFields_ = [9,10,11,16,17,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.Heartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.Heartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.Heartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.Heartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    publicUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    maxVolumeCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxFileKey: jspb.Message.getFieldWithDefault(msg, 5, 0),
    dataCenter: jspb.Message.getFieldWithDefault(msg, 6, ""),
    rack: jspb.Message.getFieldWithDefault(msg, 7, ""),
    adminPort: jspb.Message.getFieldWithDefault(msg, 8, 0),
    volumesList: jspb.Message.toObjectList(msg.getVolumesList(),
    proto.master_pb.VolumeInformationMessage.toObject, includeInstance),
    newVolumesList: jspb.Message.toObjectList(msg.getNewVolumesList(),
    proto.master_pb.VolumeShortInformationMessage.toObject, includeInstance),
    deletedVolumesList: jspb.Message.toObjectList(msg.getDeletedVolumesList(),
    proto.master_pb.VolumeShortInformationMessage.toObject, includeInstance),
    hasNoVolumes: jspb.Message.getFieldWithDefault(msg, 12, false),
    ecShardsList: jspb.Message.toObjectList(msg.getEcShardsList(),
    proto.master_pb.VolumeEcShardInformationMessage.toObject, includeInstance),
    newEcShardsList: jspb.Message.toObjectList(msg.getNewEcShardsList(),
    proto.master_pb.VolumeEcShardInformationMessage.toObject, includeInstance),
    deletedEcShardsList: jspb.Message.toObjectList(msg.getDeletedEcShardsList(),
    proto.master_pb.VolumeEcShardInformationMessage.toObject, includeInstance),
    hasNoEcShards: jspb.Message.getFieldWithDefault(msg, 19, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.Heartbeat}
 */
proto.master_pb.Heartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.Heartbeat;
  return proto.master_pb.Heartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.Heartbeat}
 */
proto.master_pb.Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicUrl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxVolumeCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxFileKey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataCenter(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRack(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAdminPort(value);
      break;
    case 9:
      var value = new proto.master_pb.VolumeInformationMessage;
      reader.readMessage(value,proto.master_pb.VolumeInformationMessage.deserializeBinaryFromReader);
      msg.addVolumes(value);
      break;
    case 10:
      var value = new proto.master_pb.VolumeShortInformationMessage;
      reader.readMessage(value,proto.master_pb.VolumeShortInformationMessage.deserializeBinaryFromReader);
      msg.addNewVolumes(value);
      break;
    case 11:
      var value = new proto.master_pb.VolumeShortInformationMessage;
      reader.readMessage(value,proto.master_pb.VolumeShortInformationMessage.deserializeBinaryFromReader);
      msg.addDeletedVolumes(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasNoVolumes(value);
      break;
    case 16:
      var value = new proto.master_pb.VolumeEcShardInformationMessage;
      reader.readMessage(value,proto.master_pb.VolumeEcShardInformationMessage.deserializeBinaryFromReader);
      msg.addEcShards(value);
      break;
    case 17:
      var value = new proto.master_pb.VolumeEcShardInformationMessage;
      reader.readMessage(value,proto.master_pb.VolumeEcShardInformationMessage.deserializeBinaryFromReader);
      msg.addNewEcShards(value);
      break;
    case 18:
      var value = new proto.master_pb.VolumeEcShardInformationMessage;
      reader.readMessage(value,proto.master_pb.VolumeEcShardInformationMessage.deserializeBinaryFromReader);
      msg.addDeletedEcShards(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasNoEcShards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.Heartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.Heartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPublicUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMaxVolumeCount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMaxFileKey();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getDataCenter();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRack();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAdminPort();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getVolumesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.master_pb.VolumeInformationMessage.serializeBinaryToWriter
    );
  }
  f = message.getNewVolumesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.master_pb.VolumeShortInformationMessage.serializeBinaryToWriter
    );
  }
  f = message.getDeletedVolumesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.master_pb.VolumeShortInformationMessage.serializeBinaryToWriter
    );
  }
  f = message.getHasNoVolumes();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getEcShardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.master_pb.VolumeEcShardInformationMessage.serializeBinaryToWriter
    );
  }
  f = message.getNewEcShardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.master_pb.VolumeEcShardInformationMessage.serializeBinaryToWriter
    );
  }
  f = message.getDeletedEcShardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.master_pb.VolumeEcShardInformationMessage.serializeBinaryToWriter
    );
  }
  f = message.getHasNoEcShards();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.master_pb.Heartbeat.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.Heartbeat.prototype.setIp = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.master_pb.Heartbeat.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.master_pb.Heartbeat.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string public_url = 3;
 * @return {string}
 */
proto.master_pb.Heartbeat.prototype.getPublicUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.master_pb.Heartbeat.prototype.setPublicUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 max_volume_count = 4;
 * @return {number}
 */
proto.master_pb.Heartbeat.prototype.getMaxVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.master_pb.Heartbeat.prototype.setMaxVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 max_file_key = 5;
 * @return {number}
 */
proto.master_pb.Heartbeat.prototype.getMaxFileKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.master_pb.Heartbeat.prototype.setMaxFileKey = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string data_center = 6;
 * @return {string}
 */
proto.master_pb.Heartbeat.prototype.getDataCenter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.master_pb.Heartbeat.prototype.setDataCenter = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string rack = 7;
 * @return {string}
 */
proto.master_pb.Heartbeat.prototype.getRack = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.master_pb.Heartbeat.prototype.setRack = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 admin_port = 8;
 * @return {number}
 */
proto.master_pb.Heartbeat.prototype.getAdminPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.master_pb.Heartbeat.prototype.setAdminPort = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated VolumeInformationMessage volumes = 9;
 * @return {!Array<!proto.master_pb.VolumeInformationMessage>}
 */
proto.master_pb.Heartbeat.prototype.getVolumesList = function() {
  return /** @type{!Array<!proto.master_pb.VolumeInformationMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.VolumeInformationMessage, 9));
};


/** @param {!Array<!proto.master_pb.VolumeInformationMessage>} value */
proto.master_pb.Heartbeat.prototype.setVolumesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.master_pb.VolumeInformationMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.VolumeInformationMessage}
 */
proto.master_pb.Heartbeat.prototype.addVolumes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.master_pb.VolumeInformationMessage, opt_index);
};


proto.master_pb.Heartbeat.prototype.clearVolumesList = function() {
  this.setVolumesList([]);
};


/**
 * repeated VolumeShortInformationMessage new_volumes = 10;
 * @return {!Array<!proto.master_pb.VolumeShortInformationMessage>}
 */
proto.master_pb.Heartbeat.prototype.getNewVolumesList = function() {
  return /** @type{!Array<!proto.master_pb.VolumeShortInformationMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.VolumeShortInformationMessage, 10));
};


/** @param {!Array<!proto.master_pb.VolumeShortInformationMessage>} value */
proto.master_pb.Heartbeat.prototype.setNewVolumesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.master_pb.VolumeShortInformationMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.VolumeShortInformationMessage}
 */
proto.master_pb.Heartbeat.prototype.addNewVolumes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.master_pb.VolumeShortInformationMessage, opt_index);
};


proto.master_pb.Heartbeat.prototype.clearNewVolumesList = function() {
  this.setNewVolumesList([]);
};


/**
 * repeated VolumeShortInformationMessage deleted_volumes = 11;
 * @return {!Array<!proto.master_pb.VolumeShortInformationMessage>}
 */
proto.master_pb.Heartbeat.prototype.getDeletedVolumesList = function() {
  return /** @type{!Array<!proto.master_pb.VolumeShortInformationMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.VolumeShortInformationMessage, 11));
};


/** @param {!Array<!proto.master_pb.VolumeShortInformationMessage>} value */
proto.master_pb.Heartbeat.prototype.setDeletedVolumesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.master_pb.VolumeShortInformationMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.VolumeShortInformationMessage}
 */
proto.master_pb.Heartbeat.prototype.addDeletedVolumes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.master_pb.VolumeShortInformationMessage, opt_index);
};


proto.master_pb.Heartbeat.prototype.clearDeletedVolumesList = function() {
  this.setDeletedVolumesList([]);
};


/**
 * optional bool has_no_volumes = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.master_pb.Heartbeat.prototype.getHasNoVolumes = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.master_pb.Heartbeat.prototype.setHasNoVolumes = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * repeated VolumeEcShardInformationMessage ec_shards = 16;
 * @return {!Array<!proto.master_pb.VolumeEcShardInformationMessage>}
 */
proto.master_pb.Heartbeat.prototype.getEcShardsList = function() {
  return /** @type{!Array<!proto.master_pb.VolumeEcShardInformationMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.VolumeEcShardInformationMessage, 16));
};


/** @param {!Array<!proto.master_pb.VolumeEcShardInformationMessage>} value */
proto.master_pb.Heartbeat.prototype.setEcShardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.master_pb.VolumeEcShardInformationMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.VolumeEcShardInformationMessage}
 */
proto.master_pb.Heartbeat.prototype.addEcShards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.master_pb.VolumeEcShardInformationMessage, opt_index);
};


proto.master_pb.Heartbeat.prototype.clearEcShardsList = function() {
  this.setEcShardsList([]);
};


/**
 * repeated VolumeEcShardInformationMessage new_ec_shards = 17;
 * @return {!Array<!proto.master_pb.VolumeEcShardInformationMessage>}
 */
proto.master_pb.Heartbeat.prototype.getNewEcShardsList = function() {
  return /** @type{!Array<!proto.master_pb.VolumeEcShardInformationMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.VolumeEcShardInformationMessage, 17));
};


/** @param {!Array<!proto.master_pb.VolumeEcShardInformationMessage>} value */
proto.master_pb.Heartbeat.prototype.setNewEcShardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.master_pb.VolumeEcShardInformationMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.VolumeEcShardInformationMessage}
 */
proto.master_pb.Heartbeat.prototype.addNewEcShards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.master_pb.VolumeEcShardInformationMessage, opt_index);
};


proto.master_pb.Heartbeat.prototype.clearNewEcShardsList = function() {
  this.setNewEcShardsList([]);
};


/**
 * repeated VolumeEcShardInformationMessage deleted_ec_shards = 18;
 * @return {!Array<!proto.master_pb.VolumeEcShardInformationMessage>}
 */
proto.master_pb.Heartbeat.prototype.getDeletedEcShardsList = function() {
  return /** @type{!Array<!proto.master_pb.VolumeEcShardInformationMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.VolumeEcShardInformationMessage, 18));
};


/** @param {!Array<!proto.master_pb.VolumeEcShardInformationMessage>} value */
proto.master_pb.Heartbeat.prototype.setDeletedEcShardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.master_pb.VolumeEcShardInformationMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.VolumeEcShardInformationMessage}
 */
proto.master_pb.Heartbeat.prototype.addDeletedEcShards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.master_pb.VolumeEcShardInformationMessage, opt_index);
};


proto.master_pb.Heartbeat.prototype.clearDeletedEcShardsList = function() {
  this.setDeletedEcShardsList([]);
};


/**
 * optional bool has_no_ec_shards = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.master_pb.Heartbeat.prototype.getHasNoEcShards = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 19, false));
};


/** @param {boolean} value */
proto.master_pb.Heartbeat.prototype.setHasNoEcShards = function(value) {
  jspb.Message.setProto3BooleanField(this, 19, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.HeartbeatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.HeartbeatResponse.repeatedFields_, null);
};
goog.inherits(proto.master_pb.HeartbeatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.HeartbeatResponse.displayName = 'proto.master_pb.HeartbeatResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.HeartbeatResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.HeartbeatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.HeartbeatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.HeartbeatResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.HeartbeatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    volumeSizeLimit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    leader: jspb.Message.getFieldWithDefault(msg, 2, ""),
    metricsAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    metricsIntervalSeconds: jspb.Message.getFieldWithDefault(msg, 4, 0),
    storageBackendsList: jspb.Message.toObjectList(msg.getStorageBackendsList(),
    proto.master_pb.StorageBackend.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.HeartbeatResponse}
 */
proto.master_pb.HeartbeatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.HeartbeatResponse;
  return proto.master_pb.HeartbeatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.HeartbeatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.HeartbeatResponse}
 */
proto.master_pb.HeartbeatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolumeSizeLimit(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeader(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetricsAddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMetricsIntervalSeconds(value);
      break;
    case 5:
      var value = new proto.master_pb.StorageBackend;
      reader.readMessage(value,proto.master_pb.StorageBackend.deserializeBinaryFromReader);
      msg.addStorageBackends(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.HeartbeatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.HeartbeatResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.HeartbeatResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.HeartbeatResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVolumeSizeLimit();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLeader();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetricsAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMetricsIntervalSeconds();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getStorageBackendsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.master_pb.StorageBackend.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 volume_size_limit = 1;
 * @return {number}
 */
proto.master_pb.HeartbeatResponse.prototype.getVolumeSizeLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.master_pb.HeartbeatResponse.prototype.setVolumeSizeLimit = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string leader = 2;
 * @return {string}
 */
proto.master_pb.HeartbeatResponse.prototype.getLeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.master_pb.HeartbeatResponse.prototype.setLeader = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string metrics_address = 3;
 * @return {string}
 */
proto.master_pb.HeartbeatResponse.prototype.getMetricsAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.master_pb.HeartbeatResponse.prototype.setMetricsAddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 metrics_interval_seconds = 4;
 * @return {number}
 */
proto.master_pb.HeartbeatResponse.prototype.getMetricsIntervalSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.master_pb.HeartbeatResponse.prototype.setMetricsIntervalSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated StorageBackend storage_backends = 5;
 * @return {!Array<!proto.master_pb.StorageBackend>}
 */
proto.master_pb.HeartbeatResponse.prototype.getStorageBackendsList = function() {
  return /** @type{!Array<!proto.master_pb.StorageBackend>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.StorageBackend, 5));
};


/** @param {!Array<!proto.master_pb.StorageBackend>} value */
proto.master_pb.HeartbeatResponse.prototype.setStorageBackendsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.master_pb.StorageBackend=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.StorageBackend}
 */
proto.master_pb.HeartbeatResponse.prototype.addStorageBackends = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.master_pb.StorageBackend, opt_index);
};


proto.master_pb.HeartbeatResponse.prototype.clearStorageBackendsList = function() {
  this.setStorageBackendsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.VolumeInformationMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.VolumeInformationMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.VolumeInformationMessage.displayName = 'proto.master_pb.VolumeInformationMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.VolumeInformationMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.VolumeInformationMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.VolumeInformationMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.VolumeInformationMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    collection: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fileCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    deleteCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    deletedByteCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    readOnly: jspb.Message.getFieldWithDefault(msg, 7, false),
    replicaPlacement: jspb.Message.getFieldWithDefault(msg, 8, 0),
    version: jspb.Message.getFieldWithDefault(msg, 9, 0),
    ttl: jspb.Message.getFieldWithDefault(msg, 10, 0),
    compactRevision: jspb.Message.getFieldWithDefault(msg, 11, 0),
    modifiedAtSecond: jspb.Message.getFieldWithDefault(msg, 12, 0),
    remoteStorageName: jspb.Message.getFieldWithDefault(msg, 13, ""),
    remoteStorageKey: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.VolumeInformationMessage}
 */
proto.master_pb.VolumeInformationMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.VolumeInformationMessage;
  return proto.master_pb.VolumeInformationMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.VolumeInformationMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.VolumeInformationMessage}
 */
proto.master_pb.VolumeInformationMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFileCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeleteCount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeletedByteCount(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadOnly(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplicaPlacement(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTtl(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCompactRevision(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModifiedAtSecond(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteStorageName(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteStorageKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.VolumeInformationMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.VolumeInformationMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.VolumeInformationMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.VolumeInformationMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFileCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDeleteCount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getDeletedByteCount();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getReadOnly();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getReplicaPlacement();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getCompactRevision();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getModifiedAtSecond();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getRemoteStorageName();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getRemoteStorageKey();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.master_pb.VolumeInformationMessage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.master_pb.VolumeInformationMessage.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 size = 2;
 * @return {number}
 */
proto.master_pb.VolumeInformationMessage.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.master_pb.VolumeInformationMessage.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string collection = 3;
 * @return {string}
 */
proto.master_pb.VolumeInformationMessage.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.master_pb.VolumeInformationMessage.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 file_count = 4;
 * @return {number}
 */
proto.master_pb.VolumeInformationMessage.prototype.getFileCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.master_pb.VolumeInformationMessage.prototype.setFileCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 delete_count = 5;
 * @return {number}
 */
proto.master_pb.VolumeInformationMessage.prototype.getDeleteCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.master_pb.VolumeInformationMessage.prototype.setDeleteCount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 deleted_byte_count = 6;
 * @return {number}
 */
proto.master_pb.VolumeInformationMessage.prototype.getDeletedByteCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.master_pb.VolumeInformationMessage.prototype.setDeletedByteCount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool read_only = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.master_pb.VolumeInformationMessage.prototype.getReadOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.master_pb.VolumeInformationMessage.prototype.setReadOnly = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional uint32 replica_placement = 8;
 * @return {number}
 */
proto.master_pb.VolumeInformationMessage.prototype.getReplicaPlacement = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.master_pb.VolumeInformationMessage.prototype.setReplicaPlacement = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 version = 9;
 * @return {number}
 */
proto.master_pb.VolumeInformationMessage.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.master_pb.VolumeInformationMessage.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 ttl = 10;
 * @return {number}
 */
proto.master_pb.VolumeInformationMessage.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.master_pb.VolumeInformationMessage.prototype.setTtl = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 compact_revision = 11;
 * @return {number}
 */
proto.master_pb.VolumeInformationMessage.prototype.getCompactRevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.master_pb.VolumeInformationMessage.prototype.setCompactRevision = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 modified_at_second = 12;
 * @return {number}
 */
proto.master_pb.VolumeInformationMessage.prototype.getModifiedAtSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.master_pb.VolumeInformationMessage.prototype.setModifiedAtSecond = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string remote_storage_name = 13;
 * @return {string}
 */
proto.master_pb.VolumeInformationMessage.prototype.getRemoteStorageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.master_pb.VolumeInformationMessage.prototype.setRemoteStorageName = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string remote_storage_key = 14;
 * @return {string}
 */
proto.master_pb.VolumeInformationMessage.prototype.getRemoteStorageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.master_pb.VolumeInformationMessage.prototype.setRemoteStorageKey = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.VolumeShortInformationMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.VolumeShortInformationMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.VolumeShortInformationMessage.displayName = 'proto.master_pb.VolumeShortInformationMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.VolumeShortInformationMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.VolumeShortInformationMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.VolumeShortInformationMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.VolumeShortInformationMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    collection: jspb.Message.getFieldWithDefault(msg, 3, ""),
    replicaPlacement: jspb.Message.getFieldWithDefault(msg, 8, 0),
    version: jspb.Message.getFieldWithDefault(msg, 9, 0),
    ttl: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.VolumeShortInformationMessage}
 */
proto.master_pb.VolumeShortInformationMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.VolumeShortInformationMessage;
  return proto.master_pb.VolumeShortInformationMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.VolumeShortInformationMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.VolumeShortInformationMessage}
 */
proto.master_pb.VolumeShortInformationMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplicaPlacement(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTtl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.VolumeShortInformationMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.VolumeShortInformationMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.VolumeShortInformationMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.VolumeShortInformationMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReplicaPlacement();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.master_pb.VolumeShortInformationMessage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.master_pb.VolumeShortInformationMessage.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string collection = 3;
 * @return {string}
 */
proto.master_pb.VolumeShortInformationMessage.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.master_pb.VolumeShortInformationMessage.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 replica_placement = 8;
 * @return {number}
 */
proto.master_pb.VolumeShortInformationMessage.prototype.getReplicaPlacement = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.master_pb.VolumeShortInformationMessage.prototype.setReplicaPlacement = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 version = 9;
 * @return {number}
 */
proto.master_pb.VolumeShortInformationMessage.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.master_pb.VolumeShortInformationMessage.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 ttl = 10;
 * @return {number}
 */
proto.master_pb.VolumeShortInformationMessage.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.master_pb.VolumeShortInformationMessage.prototype.setTtl = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.VolumeEcShardInformationMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.VolumeEcShardInformationMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.VolumeEcShardInformationMessage.displayName = 'proto.master_pb.VolumeEcShardInformationMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.VolumeEcShardInformationMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.VolumeEcShardInformationMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.VolumeEcShardInformationMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.VolumeEcShardInformationMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    collection: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ecIndexBits: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.VolumeEcShardInformationMessage}
 */
proto.master_pb.VolumeEcShardInformationMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.VolumeEcShardInformationMessage;
  return proto.master_pb.VolumeEcShardInformationMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.VolumeEcShardInformationMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.VolumeEcShardInformationMessage}
 */
proto.master_pb.VolumeEcShardInformationMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEcIndexBits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.VolumeEcShardInformationMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.VolumeEcShardInformationMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.VolumeEcShardInformationMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.VolumeEcShardInformationMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEcIndexBits();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.master_pb.VolumeEcShardInformationMessage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.master_pb.VolumeEcShardInformationMessage.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string collection = 2;
 * @return {string}
 */
proto.master_pb.VolumeEcShardInformationMessage.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.master_pb.VolumeEcShardInformationMessage.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 ec_index_bits = 3;
 * @return {number}
 */
proto.master_pb.VolumeEcShardInformationMessage.prototype.getEcIndexBits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.master_pb.VolumeEcShardInformationMessage.prototype.setEcIndexBits = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.StorageBackend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.StorageBackend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.StorageBackend.displayName = 'proto.master_pb.StorageBackend';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.StorageBackend.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.StorageBackend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.StorageBackend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.StorageBackend.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.StorageBackend}
 */
proto.master_pb.StorageBackend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.StorageBackend;
  return proto.master_pb.StorageBackend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.StorageBackend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.StorageBackend}
 */
proto.master_pb.StorageBackend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.StorageBackend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.StorageBackend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.StorageBackend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.StorageBackend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.master_pb.StorageBackend.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.StorageBackend.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.master_pb.StorageBackend.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.master_pb.StorageBackend.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> properties = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.master_pb.StorageBackend.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.master_pb.StorageBackend.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.Empty.displayName = 'proto.master_pb.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.Empty}
 */
proto.master_pb.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.Empty;
  return proto.master_pb.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.Empty}
 */
proto.master_pb.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.SuperBlockExtra = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.SuperBlockExtra, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.SuperBlockExtra.displayName = 'proto.master_pb.SuperBlockExtra';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.SuperBlockExtra.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.SuperBlockExtra.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.SuperBlockExtra} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.SuperBlockExtra.toObject = function(includeInstance, msg) {
  var f, obj = {
    erasureCoding: (f = msg.getErasureCoding()) && proto.master_pb.SuperBlockExtra.ErasureCoding.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.SuperBlockExtra}
 */
proto.master_pb.SuperBlockExtra.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.SuperBlockExtra;
  return proto.master_pb.SuperBlockExtra.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.SuperBlockExtra} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.SuperBlockExtra}
 */
proto.master_pb.SuperBlockExtra.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.master_pb.SuperBlockExtra.ErasureCoding;
      reader.readMessage(value,proto.master_pb.SuperBlockExtra.ErasureCoding.deserializeBinaryFromReader);
      msg.setErasureCoding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.SuperBlockExtra.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.SuperBlockExtra.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.SuperBlockExtra} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.SuperBlockExtra.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErasureCoding();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.master_pb.SuperBlockExtra.ErasureCoding.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.SuperBlockExtra.ErasureCoding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.SuperBlockExtra.ErasureCoding.repeatedFields_, null);
};
goog.inherits(proto.master_pb.SuperBlockExtra.ErasureCoding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.SuperBlockExtra.ErasureCoding.displayName = 'proto.master_pb.SuperBlockExtra.ErasureCoding';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.SuperBlockExtra.ErasureCoding.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.SuperBlockExtra.ErasureCoding.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.SuperBlockExtra.ErasureCoding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.SuperBlockExtra.ErasureCoding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.SuperBlockExtra.ErasureCoding.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    volumeIdsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.SuperBlockExtra.ErasureCoding}
 */
proto.master_pb.SuperBlockExtra.ErasureCoding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.SuperBlockExtra.ErasureCoding;
  return proto.master_pb.SuperBlockExtra.ErasureCoding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.SuperBlockExtra.ErasureCoding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.SuperBlockExtra.ErasureCoding}
 */
proto.master_pb.SuperBlockExtra.ErasureCoding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setParity(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setVolumeIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.SuperBlockExtra.ErasureCoding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.SuperBlockExtra.ErasureCoding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.SuperBlockExtra.ErasureCoding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.SuperBlockExtra.ErasureCoding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getParity();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getVolumeIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 data = 1;
 * @return {number}
 */
proto.master_pb.SuperBlockExtra.ErasureCoding.prototype.getData = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.master_pb.SuperBlockExtra.ErasureCoding.prototype.setData = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 parity = 2;
 * @return {number}
 */
proto.master_pb.SuperBlockExtra.ErasureCoding.prototype.getParity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.master_pb.SuperBlockExtra.ErasureCoding.prototype.setParity = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated uint32 volume_ids = 3;
 * @return {!Array<number>}
 */
proto.master_pb.SuperBlockExtra.ErasureCoding.prototype.getVolumeIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.master_pb.SuperBlockExtra.ErasureCoding.prototype.setVolumeIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.master_pb.SuperBlockExtra.ErasureCoding.prototype.addVolumeIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.master_pb.SuperBlockExtra.ErasureCoding.prototype.clearVolumeIdsList = function() {
  this.setVolumeIdsList([]);
};


/**
 * optional ErasureCoding erasure_coding = 1;
 * @return {?proto.master_pb.SuperBlockExtra.ErasureCoding}
 */
proto.master_pb.SuperBlockExtra.prototype.getErasureCoding = function() {
  return /** @type{?proto.master_pb.SuperBlockExtra.ErasureCoding} */ (
    jspb.Message.getWrapperField(this, proto.master_pb.SuperBlockExtra.ErasureCoding, 1));
};


/** @param {?proto.master_pb.SuperBlockExtra.ErasureCoding|undefined} value */
proto.master_pb.SuperBlockExtra.prototype.setErasureCoding = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.master_pb.SuperBlockExtra.prototype.clearErasureCoding = function() {
  this.setErasureCoding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.master_pb.SuperBlockExtra.prototype.hasErasureCoding = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.KeepConnectedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.KeepConnectedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.KeepConnectedRequest.displayName = 'proto.master_pb.KeepConnectedRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.KeepConnectedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.KeepConnectedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.KeepConnectedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.KeepConnectedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    grpcPort: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.KeepConnectedRequest}
 */
proto.master_pb.KeepConnectedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.KeepConnectedRequest;
  return proto.master_pb.KeepConnectedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.KeepConnectedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.KeepConnectedRequest}
 */
proto.master_pb.KeepConnectedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGrpcPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.KeepConnectedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.KeepConnectedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.KeepConnectedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.KeepConnectedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGrpcPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.master_pb.KeepConnectedRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.KeepConnectedRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 grpc_port = 2;
 * @return {number}
 */
proto.master_pb.KeepConnectedRequest.prototype.getGrpcPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.master_pb.KeepConnectedRequest.prototype.setGrpcPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.VolumeLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.VolumeLocation.repeatedFields_, null);
};
goog.inherits(proto.master_pb.VolumeLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.VolumeLocation.displayName = 'proto.master_pb.VolumeLocation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.VolumeLocation.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.VolumeLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.VolumeLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.VolumeLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.VolumeLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    publicUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    newVidsList: jspb.Message.getRepeatedField(msg, 3),
    deletedVidsList: jspb.Message.getRepeatedField(msg, 4),
    leader: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.VolumeLocation}
 */
proto.master_pb.VolumeLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.VolumeLocation;
  return proto.master_pb.VolumeLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.VolumeLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.VolumeLocation}
 */
proto.master_pb.VolumeLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicUrl(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setNewVidsList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setDeletedVidsList(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.VolumeLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.VolumeLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.VolumeLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.VolumeLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublicUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNewVidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getDeletedVidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getLeader();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.master_pb.VolumeLocation.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.VolumeLocation.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string public_url = 2;
 * @return {string}
 */
proto.master_pb.VolumeLocation.prototype.getPublicUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.master_pb.VolumeLocation.prototype.setPublicUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated uint32 new_vids = 3;
 * @return {!Array<number>}
 */
proto.master_pb.VolumeLocation.prototype.getNewVidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.master_pb.VolumeLocation.prototype.setNewVidsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.master_pb.VolumeLocation.prototype.addNewVids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.master_pb.VolumeLocation.prototype.clearNewVidsList = function() {
  this.setNewVidsList([]);
};


/**
 * repeated uint32 deleted_vids = 4;
 * @return {!Array<number>}
 */
proto.master_pb.VolumeLocation.prototype.getDeletedVidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<number>} value */
proto.master_pb.VolumeLocation.prototype.setDeletedVidsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.master_pb.VolumeLocation.prototype.addDeletedVids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.master_pb.VolumeLocation.prototype.clearDeletedVidsList = function() {
  this.setDeletedVidsList([]);
};


/**
 * optional string leader = 5;
 * @return {string}
 */
proto.master_pb.VolumeLocation.prototype.getLeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.master_pb.VolumeLocation.prototype.setLeader = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.LookupVolumeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.LookupVolumeRequest.repeatedFields_, null);
};
goog.inherits(proto.master_pb.LookupVolumeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.LookupVolumeRequest.displayName = 'proto.master_pb.LookupVolumeRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.LookupVolumeRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.LookupVolumeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.LookupVolumeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.LookupVolumeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.LookupVolumeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    volumeIdsList: jspb.Message.getRepeatedField(msg, 1),
    collection: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.LookupVolumeRequest}
 */
proto.master_pb.LookupVolumeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.LookupVolumeRequest;
  return proto.master_pb.LookupVolumeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.LookupVolumeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.LookupVolumeRequest}
 */
proto.master_pb.LookupVolumeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addVolumeIds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.LookupVolumeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.LookupVolumeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.LookupVolumeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.LookupVolumeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVolumeIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string volume_ids = 1;
 * @return {!Array<string>}
 */
proto.master_pb.LookupVolumeRequest.prototype.getVolumeIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.master_pb.LookupVolumeRequest.prototype.setVolumeIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.master_pb.LookupVolumeRequest.prototype.addVolumeIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.master_pb.LookupVolumeRequest.prototype.clearVolumeIdsList = function() {
  this.setVolumeIdsList([]);
};


/**
 * optional string collection = 2;
 * @return {string}
 */
proto.master_pb.LookupVolumeRequest.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.master_pb.LookupVolumeRequest.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.LookupVolumeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.LookupVolumeResponse.repeatedFields_, null);
};
goog.inherits(proto.master_pb.LookupVolumeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.LookupVolumeResponse.displayName = 'proto.master_pb.LookupVolumeResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.LookupVolumeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.LookupVolumeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.LookupVolumeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.LookupVolumeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.LookupVolumeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    volumeIdLocationsList: jspb.Message.toObjectList(msg.getVolumeIdLocationsList(),
    proto.master_pb.LookupVolumeResponse.VolumeIdLocation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.LookupVolumeResponse}
 */
proto.master_pb.LookupVolumeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.LookupVolumeResponse;
  return proto.master_pb.LookupVolumeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.LookupVolumeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.LookupVolumeResponse}
 */
proto.master_pb.LookupVolumeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.master_pb.LookupVolumeResponse.VolumeIdLocation;
      reader.readMessage(value,proto.master_pb.LookupVolumeResponse.VolumeIdLocation.deserializeBinaryFromReader);
      msg.addVolumeIdLocations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.LookupVolumeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.LookupVolumeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.LookupVolumeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.LookupVolumeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVolumeIdLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.master_pb.LookupVolumeResponse.VolumeIdLocation.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.LookupVolumeResponse.VolumeIdLocation.repeatedFields_, null);
};
goog.inherits(proto.master_pb.LookupVolumeResponse.VolumeIdLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.LookupVolumeResponse.VolumeIdLocation.displayName = 'proto.master_pb.LookupVolumeResponse.VolumeIdLocation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.LookupVolumeResponse.VolumeIdLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.LookupVolumeResponse.VolumeIdLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    volumeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    locationsList: jspb.Message.toObjectList(msg.getLocationsList(),
    proto.master_pb.Location.toObject, includeInstance),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.LookupVolumeResponse.VolumeIdLocation}
 */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.LookupVolumeResponse.VolumeIdLocation;
  return proto.master_pb.LookupVolumeResponse.VolumeIdLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.LookupVolumeResponse.VolumeIdLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.LookupVolumeResponse.VolumeIdLocation}
 */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolumeId(value);
      break;
    case 2:
      var value = new proto.master_pb.Location;
      reader.readMessage(value,proto.master_pb.Location.deserializeBinaryFromReader);
      msg.addLocations(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.LookupVolumeResponse.VolumeIdLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.LookupVolumeResponse.VolumeIdLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVolumeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.master_pb.Location.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string volume_id = 1;
 * @return {string}
 */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.prototype.getVolumeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.prototype.setVolumeId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Location locations = 2;
 * @return {!Array<!proto.master_pb.Location>}
 */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.prototype.getLocationsList = function() {
  return /** @type{!Array<!proto.master_pb.Location>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.Location, 2));
};


/** @param {!Array<!proto.master_pb.Location>} value */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.prototype.setLocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.master_pb.Location=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.Location}
 */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.prototype.addLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.master_pb.Location, opt_index);
};


proto.master_pb.LookupVolumeResponse.VolumeIdLocation.prototype.clearLocationsList = function() {
  this.setLocationsList([]);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.master_pb.LookupVolumeResponse.VolumeIdLocation.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated VolumeIdLocation volume_id_locations = 1;
 * @return {!Array<!proto.master_pb.LookupVolumeResponse.VolumeIdLocation>}
 */
proto.master_pb.LookupVolumeResponse.prototype.getVolumeIdLocationsList = function() {
  return /** @type{!Array<!proto.master_pb.LookupVolumeResponse.VolumeIdLocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.LookupVolumeResponse.VolumeIdLocation, 1));
};


/** @param {!Array<!proto.master_pb.LookupVolumeResponse.VolumeIdLocation>} value */
proto.master_pb.LookupVolumeResponse.prototype.setVolumeIdLocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.master_pb.LookupVolumeResponse.VolumeIdLocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.LookupVolumeResponse.VolumeIdLocation}
 */
proto.master_pb.LookupVolumeResponse.prototype.addVolumeIdLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.master_pb.LookupVolumeResponse.VolumeIdLocation, opt_index);
};


proto.master_pb.LookupVolumeResponse.prototype.clearVolumeIdLocationsList = function() {
  this.setVolumeIdLocationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.Location.displayName = 'proto.master_pb.Location';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    publicUrl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.Location}
 */
proto.master_pb.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.Location;
  return proto.master_pb.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.Location}
 */
proto.master_pb.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublicUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.master_pb.Location.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.Location.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string public_url = 2;
 * @return {string}
 */
proto.master_pb.Location.prototype.getPublicUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.master_pb.Location.prototype.setPublicUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.AssignRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.AssignRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.AssignRequest.displayName = 'proto.master_pb.AssignRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.AssignRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.AssignRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.AssignRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.AssignRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    replication: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collection: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ttl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dataCenter: jspb.Message.getFieldWithDefault(msg, 5, ""),
    rack: jspb.Message.getFieldWithDefault(msg, 6, ""),
    dataNode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    memoryMapMaxSizeMb: jspb.Message.getFieldWithDefault(msg, 8, 0),
    writableVolumeCount: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.AssignRequest}
 */
proto.master_pb.AssignRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.AssignRequest;
  return proto.master_pb.AssignRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.AssignRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.AssignRequest}
 */
proto.master_pb.AssignRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplication(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTtl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataCenter(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRack(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataNode(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMemoryMapMaxSizeMb(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWritableVolumeCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.AssignRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.AssignRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.AssignRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.AssignRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getReplication();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTtl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDataCenter();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRack();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDataNode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMemoryMapMaxSizeMb();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getWritableVolumeCount();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional uint64 count = 1;
 * @return {number}
 */
proto.master_pb.AssignRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.master_pb.AssignRequest.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string replication = 2;
 * @return {string}
 */
proto.master_pb.AssignRequest.prototype.getReplication = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.master_pb.AssignRequest.prototype.setReplication = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string collection = 3;
 * @return {string}
 */
proto.master_pb.AssignRequest.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.master_pb.AssignRequest.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ttl = 4;
 * @return {string}
 */
proto.master_pb.AssignRequest.prototype.getTtl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.master_pb.AssignRequest.prototype.setTtl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string data_center = 5;
 * @return {string}
 */
proto.master_pb.AssignRequest.prototype.getDataCenter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.master_pb.AssignRequest.prototype.setDataCenter = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string rack = 6;
 * @return {string}
 */
proto.master_pb.AssignRequest.prototype.getRack = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.master_pb.AssignRequest.prototype.setRack = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string data_node = 7;
 * @return {string}
 */
proto.master_pb.AssignRequest.prototype.getDataNode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.master_pb.AssignRequest.prototype.setDataNode = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 memory_map_max_size_mb = 8;
 * @return {number}
 */
proto.master_pb.AssignRequest.prototype.getMemoryMapMaxSizeMb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.master_pb.AssignRequest.prototype.setMemoryMapMaxSizeMb = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 Writable_volume_count = 9;
 * @return {number}
 */
proto.master_pb.AssignRequest.prototype.getWritableVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.master_pb.AssignRequest.prototype.setWritableVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.AssignResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.AssignResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.AssignResponse.displayName = 'proto.master_pb.AssignResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.AssignResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.AssignResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.AssignResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.AssignResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    publicUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0),
    error: jspb.Message.getFieldWithDefault(msg, 5, ""),
    auth: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.AssignResponse}
 */
proto.master_pb.AssignResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.AssignResponse;
  return proto.master_pb.AssignResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.AssignResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.AssignResponse}
 */
proto.master_pb.AssignResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicUrl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.AssignResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.AssignResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.AssignResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.AssignResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPublicUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAuth();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string fid = 1;
 * @return {string}
 */
proto.master_pb.AssignResponse.prototype.getFid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.AssignResponse.prototype.setFid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.master_pb.AssignResponse.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.master_pb.AssignResponse.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string public_url = 3;
 * @return {string}
 */
proto.master_pb.AssignResponse.prototype.getPublicUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.master_pb.AssignResponse.prototype.setPublicUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 count = 4;
 * @return {number}
 */
proto.master_pb.AssignResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.master_pb.AssignResponse.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string error = 5;
 * @return {string}
 */
proto.master_pb.AssignResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.master_pb.AssignResponse.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string auth = 6;
 * @return {string}
 */
proto.master_pb.AssignResponse.prototype.getAuth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.master_pb.AssignResponse.prototype.setAuth = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.StatisticsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.StatisticsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.StatisticsRequest.displayName = 'proto.master_pb.StatisticsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.StatisticsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.StatisticsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.StatisticsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.StatisticsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    replication: jspb.Message.getFieldWithDefault(msg, 1, ""),
    collection: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ttl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.StatisticsRequest}
 */
proto.master_pb.StatisticsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.StatisticsRequest;
  return proto.master_pb.StatisticsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.StatisticsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.StatisticsRequest}
 */
proto.master_pb.StatisticsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplication(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTtl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.StatisticsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.StatisticsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.StatisticsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.StatisticsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplication();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTtl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string replication = 1;
 * @return {string}
 */
proto.master_pb.StatisticsRequest.prototype.getReplication = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.StatisticsRequest.prototype.setReplication = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string collection = 2;
 * @return {string}
 */
proto.master_pb.StatisticsRequest.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.master_pb.StatisticsRequest.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ttl = 3;
 * @return {string}
 */
proto.master_pb.StatisticsRequest.prototype.getTtl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.master_pb.StatisticsRequest.prototype.setTtl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.StatisticsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.StatisticsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.StatisticsResponse.displayName = 'proto.master_pb.StatisticsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.StatisticsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.StatisticsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.StatisticsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.StatisticsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    replication: jspb.Message.getFieldWithDefault(msg, 1, ""),
    collection: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ttl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    totalSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    usedSize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fileCount: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.StatisticsResponse}
 */
proto.master_pb.StatisticsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.StatisticsResponse;
  return proto.master_pb.StatisticsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.StatisticsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.StatisticsResponse}
 */
proto.master_pb.StatisticsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplication(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTtl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsedSize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFileCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.StatisticsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.StatisticsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.StatisticsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.StatisticsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplication();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTtl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTotalSize();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getUsedSize();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getFileCount();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional string replication = 1;
 * @return {string}
 */
proto.master_pb.StatisticsResponse.prototype.getReplication = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.StatisticsResponse.prototype.setReplication = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string collection = 2;
 * @return {string}
 */
proto.master_pb.StatisticsResponse.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.master_pb.StatisticsResponse.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ttl = 3;
 * @return {string}
 */
proto.master_pb.StatisticsResponse.prototype.getTtl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.master_pb.StatisticsResponse.prototype.setTtl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 total_size = 4;
 * @return {number}
 */
proto.master_pb.StatisticsResponse.prototype.getTotalSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.master_pb.StatisticsResponse.prototype.setTotalSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 used_size = 5;
 * @return {number}
 */
proto.master_pb.StatisticsResponse.prototype.getUsedSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.master_pb.StatisticsResponse.prototype.setUsedSize = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 file_count = 6;
 * @return {number}
 */
proto.master_pb.StatisticsResponse.prototype.getFileCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.master_pb.StatisticsResponse.prototype.setFileCount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.StorageType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.StorageType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.StorageType.displayName = 'proto.master_pb.StorageType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.StorageType.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.StorageType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.StorageType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.StorageType.toObject = function(includeInstance, msg) {
  var f, obj = {
    replication: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ttl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.StorageType}
 */
proto.master_pb.StorageType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.StorageType;
  return proto.master_pb.StorageType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.StorageType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.StorageType}
 */
proto.master_pb.StorageType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplication(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTtl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.StorageType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.StorageType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.StorageType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.StorageType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplication();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTtl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string replication = 1;
 * @return {string}
 */
proto.master_pb.StorageType.prototype.getReplication = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.StorageType.prototype.setReplication = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ttl = 2;
 * @return {string}
 */
proto.master_pb.StorageType.prototype.getTtl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.master_pb.StorageType.prototype.setTtl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.Collection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.Collection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.Collection.displayName = 'proto.master_pb.Collection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.Collection.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.Collection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.Collection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.Collection.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.Collection}
 */
proto.master_pb.Collection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.Collection;
  return proto.master_pb.Collection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.Collection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.Collection}
 */
proto.master_pb.Collection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.Collection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.Collection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.Collection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.Collection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.master_pb.Collection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.Collection.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.CollectionListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.CollectionListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.CollectionListRequest.displayName = 'proto.master_pb.CollectionListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.CollectionListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.CollectionListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.CollectionListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.CollectionListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    includeNormalVolumes: jspb.Message.getFieldWithDefault(msg, 1, false),
    includeEcVolumes: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.CollectionListRequest}
 */
proto.master_pb.CollectionListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.CollectionListRequest;
  return proto.master_pb.CollectionListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.CollectionListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.CollectionListRequest}
 */
proto.master_pb.CollectionListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeNormalVolumes(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeEcVolumes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.CollectionListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.CollectionListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.CollectionListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.CollectionListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIncludeNormalVolumes();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIncludeEcVolumes();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool include_normal_volumes = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.master_pb.CollectionListRequest.prototype.getIncludeNormalVolumes = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.master_pb.CollectionListRequest.prototype.setIncludeNormalVolumes = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool include_ec_volumes = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.master_pb.CollectionListRequest.prototype.getIncludeEcVolumes = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.master_pb.CollectionListRequest.prototype.setIncludeEcVolumes = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.CollectionListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.CollectionListResponse.repeatedFields_, null);
};
goog.inherits(proto.master_pb.CollectionListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.CollectionListResponse.displayName = 'proto.master_pb.CollectionListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.CollectionListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.CollectionListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.CollectionListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.CollectionListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.CollectionListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionsList: jspb.Message.toObjectList(msg.getCollectionsList(),
    proto.master_pb.Collection.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.CollectionListResponse}
 */
proto.master_pb.CollectionListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.CollectionListResponse;
  return proto.master_pb.CollectionListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.CollectionListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.CollectionListResponse}
 */
proto.master_pb.CollectionListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.master_pb.Collection;
      reader.readMessage(value,proto.master_pb.Collection.deserializeBinaryFromReader);
      msg.addCollections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.CollectionListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.CollectionListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.CollectionListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.CollectionListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.master_pb.Collection.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Collection collections = 1;
 * @return {!Array<!proto.master_pb.Collection>}
 */
proto.master_pb.CollectionListResponse.prototype.getCollectionsList = function() {
  return /** @type{!Array<!proto.master_pb.Collection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.Collection, 1));
};


/** @param {!Array<!proto.master_pb.Collection>} value */
proto.master_pb.CollectionListResponse.prototype.setCollectionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.master_pb.Collection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.Collection}
 */
proto.master_pb.CollectionListResponse.prototype.addCollections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.master_pb.Collection, opt_index);
};


proto.master_pb.CollectionListResponse.prototype.clearCollectionsList = function() {
  this.setCollectionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.CollectionDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.CollectionDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.CollectionDeleteRequest.displayName = 'proto.master_pb.CollectionDeleteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.CollectionDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.CollectionDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.CollectionDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.CollectionDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.CollectionDeleteRequest}
 */
proto.master_pb.CollectionDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.CollectionDeleteRequest;
  return proto.master_pb.CollectionDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.CollectionDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.CollectionDeleteRequest}
 */
proto.master_pb.CollectionDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.CollectionDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.CollectionDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.CollectionDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.CollectionDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.master_pb.CollectionDeleteRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.CollectionDeleteRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.CollectionDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.CollectionDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.CollectionDeleteResponse.displayName = 'proto.master_pb.CollectionDeleteResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.CollectionDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.CollectionDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.CollectionDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.CollectionDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.CollectionDeleteResponse}
 */
proto.master_pb.CollectionDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.CollectionDeleteResponse;
  return proto.master_pb.CollectionDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.CollectionDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.CollectionDeleteResponse}
 */
proto.master_pb.CollectionDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.CollectionDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.CollectionDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.CollectionDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.CollectionDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.DataNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.DataNodeInfo.repeatedFields_, null);
};
goog.inherits(proto.master_pb.DataNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.DataNodeInfo.displayName = 'proto.master_pb.DataNodeInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.DataNodeInfo.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.DataNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.DataNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.DataNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.DataNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    volumeCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxVolumeCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    freeVolumeCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    activeVolumeCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    volumeInfosList: jspb.Message.toObjectList(msg.getVolumeInfosList(),
    proto.master_pb.VolumeInformationMessage.toObject, includeInstance),
    ecShardInfosList: jspb.Message.toObjectList(msg.getEcShardInfosList(),
    proto.master_pb.VolumeEcShardInformationMessage.toObject, includeInstance),
    remoteVolumeCount: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.DataNodeInfo}
 */
proto.master_pb.DataNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.DataNodeInfo;
  return proto.master_pb.DataNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.DataNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.DataNodeInfo}
 */
proto.master_pb.DataNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolumeCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxVolumeCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFreeVolumeCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActiveVolumeCount(value);
      break;
    case 6:
      var value = new proto.master_pb.VolumeInformationMessage;
      reader.readMessage(value,proto.master_pb.VolumeInformationMessage.deserializeBinaryFromReader);
      msg.addVolumeInfos(value);
      break;
    case 7:
      var value = new proto.master_pb.VolumeEcShardInformationMessage;
      reader.readMessage(value,proto.master_pb.VolumeEcShardInformationMessage.deserializeBinaryFromReader);
      msg.addEcShardInfos(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemoteVolumeCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.DataNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.DataNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.DataNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.DataNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMaxVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFreeVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getActiveVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getVolumeInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.master_pb.VolumeInformationMessage.serializeBinaryToWriter
    );
  }
  f = message.getEcShardInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.master_pb.VolumeEcShardInformationMessage.serializeBinaryToWriter
    );
  }
  f = message.getRemoteVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.master_pb.DataNodeInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.DataNodeInfo.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 volume_count = 2;
 * @return {number}
 */
proto.master_pb.DataNodeInfo.prototype.getVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.master_pb.DataNodeInfo.prototype.setVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 max_volume_count = 3;
 * @return {number}
 */
proto.master_pb.DataNodeInfo.prototype.getMaxVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.master_pb.DataNodeInfo.prototype.setMaxVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 free_volume_count = 4;
 * @return {number}
 */
proto.master_pb.DataNodeInfo.prototype.getFreeVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.master_pb.DataNodeInfo.prototype.setFreeVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 active_volume_count = 5;
 * @return {number}
 */
proto.master_pb.DataNodeInfo.prototype.getActiveVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.master_pb.DataNodeInfo.prototype.setActiveVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated VolumeInformationMessage volume_infos = 6;
 * @return {!Array<!proto.master_pb.VolumeInformationMessage>}
 */
proto.master_pb.DataNodeInfo.prototype.getVolumeInfosList = function() {
  return /** @type{!Array<!proto.master_pb.VolumeInformationMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.VolumeInformationMessage, 6));
};


/** @param {!Array<!proto.master_pb.VolumeInformationMessage>} value */
proto.master_pb.DataNodeInfo.prototype.setVolumeInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.master_pb.VolumeInformationMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.VolumeInformationMessage}
 */
proto.master_pb.DataNodeInfo.prototype.addVolumeInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.master_pb.VolumeInformationMessage, opt_index);
};


proto.master_pb.DataNodeInfo.prototype.clearVolumeInfosList = function() {
  this.setVolumeInfosList([]);
};


/**
 * repeated VolumeEcShardInformationMessage ec_shard_infos = 7;
 * @return {!Array<!proto.master_pb.VolumeEcShardInformationMessage>}
 */
proto.master_pb.DataNodeInfo.prototype.getEcShardInfosList = function() {
  return /** @type{!Array<!proto.master_pb.VolumeEcShardInformationMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.VolumeEcShardInformationMessage, 7));
};


/** @param {!Array<!proto.master_pb.VolumeEcShardInformationMessage>} value */
proto.master_pb.DataNodeInfo.prototype.setEcShardInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.master_pb.VolumeEcShardInformationMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.VolumeEcShardInformationMessage}
 */
proto.master_pb.DataNodeInfo.prototype.addEcShardInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.master_pb.VolumeEcShardInformationMessage, opt_index);
};


proto.master_pb.DataNodeInfo.prototype.clearEcShardInfosList = function() {
  this.setEcShardInfosList([]);
};


/**
 * optional uint64 remote_volume_count = 8;
 * @return {number}
 */
proto.master_pb.DataNodeInfo.prototype.getRemoteVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.master_pb.DataNodeInfo.prototype.setRemoteVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.RackInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.RackInfo.repeatedFields_, null);
};
goog.inherits(proto.master_pb.RackInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.RackInfo.displayName = 'proto.master_pb.RackInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.RackInfo.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.RackInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.RackInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.RackInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.RackInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    volumeCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxVolumeCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    freeVolumeCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    activeVolumeCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    dataNodeInfosList: jspb.Message.toObjectList(msg.getDataNodeInfosList(),
    proto.master_pb.DataNodeInfo.toObject, includeInstance),
    remoteVolumeCount: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.RackInfo}
 */
proto.master_pb.RackInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.RackInfo;
  return proto.master_pb.RackInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.RackInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.RackInfo}
 */
proto.master_pb.RackInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolumeCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxVolumeCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFreeVolumeCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActiveVolumeCount(value);
      break;
    case 6:
      var value = new proto.master_pb.DataNodeInfo;
      reader.readMessage(value,proto.master_pb.DataNodeInfo.deserializeBinaryFromReader);
      msg.addDataNodeInfos(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemoteVolumeCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.RackInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.RackInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.RackInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.RackInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMaxVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFreeVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getActiveVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getDataNodeInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.master_pb.DataNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getRemoteVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.master_pb.RackInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.RackInfo.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 volume_count = 2;
 * @return {number}
 */
proto.master_pb.RackInfo.prototype.getVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.master_pb.RackInfo.prototype.setVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 max_volume_count = 3;
 * @return {number}
 */
proto.master_pb.RackInfo.prototype.getMaxVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.master_pb.RackInfo.prototype.setMaxVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 free_volume_count = 4;
 * @return {number}
 */
proto.master_pb.RackInfo.prototype.getFreeVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.master_pb.RackInfo.prototype.setFreeVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 active_volume_count = 5;
 * @return {number}
 */
proto.master_pb.RackInfo.prototype.getActiveVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.master_pb.RackInfo.prototype.setActiveVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated DataNodeInfo data_node_infos = 6;
 * @return {!Array<!proto.master_pb.DataNodeInfo>}
 */
proto.master_pb.RackInfo.prototype.getDataNodeInfosList = function() {
  return /** @type{!Array<!proto.master_pb.DataNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.DataNodeInfo, 6));
};


/** @param {!Array<!proto.master_pb.DataNodeInfo>} value */
proto.master_pb.RackInfo.prototype.setDataNodeInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.master_pb.DataNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.DataNodeInfo}
 */
proto.master_pb.RackInfo.prototype.addDataNodeInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.master_pb.DataNodeInfo, opt_index);
};


proto.master_pb.RackInfo.prototype.clearDataNodeInfosList = function() {
  this.setDataNodeInfosList([]);
};


/**
 * optional uint64 remote_volume_count = 7;
 * @return {number}
 */
proto.master_pb.RackInfo.prototype.getRemoteVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.master_pb.RackInfo.prototype.setRemoteVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.DataCenterInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.DataCenterInfo.repeatedFields_, null);
};
goog.inherits(proto.master_pb.DataCenterInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.DataCenterInfo.displayName = 'proto.master_pb.DataCenterInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.DataCenterInfo.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.DataCenterInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.DataCenterInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.DataCenterInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.DataCenterInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    volumeCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxVolumeCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    freeVolumeCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    activeVolumeCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    rackInfosList: jspb.Message.toObjectList(msg.getRackInfosList(),
    proto.master_pb.RackInfo.toObject, includeInstance),
    remoteVolumeCount: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.DataCenterInfo}
 */
proto.master_pb.DataCenterInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.DataCenterInfo;
  return proto.master_pb.DataCenterInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.DataCenterInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.DataCenterInfo}
 */
proto.master_pb.DataCenterInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolumeCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxVolumeCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFreeVolumeCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActiveVolumeCount(value);
      break;
    case 6:
      var value = new proto.master_pb.RackInfo;
      reader.readMessage(value,proto.master_pb.RackInfo.deserializeBinaryFromReader);
      msg.addRackInfos(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemoteVolumeCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.DataCenterInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.DataCenterInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.DataCenterInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.DataCenterInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMaxVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFreeVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getActiveVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getRackInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.master_pb.RackInfo.serializeBinaryToWriter
    );
  }
  f = message.getRemoteVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.master_pb.DataCenterInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.DataCenterInfo.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 volume_count = 2;
 * @return {number}
 */
proto.master_pb.DataCenterInfo.prototype.getVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.master_pb.DataCenterInfo.prototype.setVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 max_volume_count = 3;
 * @return {number}
 */
proto.master_pb.DataCenterInfo.prototype.getMaxVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.master_pb.DataCenterInfo.prototype.setMaxVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 free_volume_count = 4;
 * @return {number}
 */
proto.master_pb.DataCenterInfo.prototype.getFreeVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.master_pb.DataCenterInfo.prototype.setFreeVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 active_volume_count = 5;
 * @return {number}
 */
proto.master_pb.DataCenterInfo.prototype.getActiveVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.master_pb.DataCenterInfo.prototype.setActiveVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated RackInfo rack_infos = 6;
 * @return {!Array<!proto.master_pb.RackInfo>}
 */
proto.master_pb.DataCenterInfo.prototype.getRackInfosList = function() {
  return /** @type{!Array<!proto.master_pb.RackInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.RackInfo, 6));
};


/** @param {!Array<!proto.master_pb.RackInfo>} value */
proto.master_pb.DataCenterInfo.prototype.setRackInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.master_pb.RackInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.RackInfo}
 */
proto.master_pb.DataCenterInfo.prototype.addRackInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.master_pb.RackInfo, opt_index);
};


proto.master_pb.DataCenterInfo.prototype.clearRackInfosList = function() {
  this.setRackInfosList([]);
};


/**
 * optional uint64 remote_volume_count = 7;
 * @return {number}
 */
proto.master_pb.DataCenterInfo.prototype.getRemoteVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.master_pb.DataCenterInfo.prototype.setRemoteVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.TopologyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.TopologyInfo.repeatedFields_, null);
};
goog.inherits(proto.master_pb.TopologyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.TopologyInfo.displayName = 'proto.master_pb.TopologyInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.TopologyInfo.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.TopologyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.TopologyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.TopologyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.TopologyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    volumeCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxVolumeCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    freeVolumeCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    activeVolumeCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    dataCenterInfosList: jspb.Message.toObjectList(msg.getDataCenterInfosList(),
    proto.master_pb.DataCenterInfo.toObject, includeInstance),
    remoteVolumeCount: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.TopologyInfo}
 */
proto.master_pb.TopologyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.TopologyInfo;
  return proto.master_pb.TopologyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.TopologyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.TopologyInfo}
 */
proto.master_pb.TopologyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolumeCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxVolumeCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFreeVolumeCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActiveVolumeCount(value);
      break;
    case 6:
      var value = new proto.master_pb.DataCenterInfo;
      reader.readMessage(value,proto.master_pb.DataCenterInfo.deserializeBinaryFromReader);
      msg.addDataCenterInfos(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemoteVolumeCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.TopologyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.TopologyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.TopologyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.TopologyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMaxVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFreeVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getActiveVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getDataCenterInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.master_pb.DataCenterInfo.serializeBinaryToWriter
    );
  }
  f = message.getRemoteVolumeCount();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.master_pb.TopologyInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.TopologyInfo.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 volume_count = 2;
 * @return {number}
 */
proto.master_pb.TopologyInfo.prototype.getVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.master_pb.TopologyInfo.prototype.setVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 max_volume_count = 3;
 * @return {number}
 */
proto.master_pb.TopologyInfo.prototype.getMaxVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.master_pb.TopologyInfo.prototype.setMaxVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 free_volume_count = 4;
 * @return {number}
 */
proto.master_pb.TopologyInfo.prototype.getFreeVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.master_pb.TopologyInfo.prototype.setFreeVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 active_volume_count = 5;
 * @return {number}
 */
proto.master_pb.TopologyInfo.prototype.getActiveVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.master_pb.TopologyInfo.prototype.setActiveVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated DataCenterInfo data_center_infos = 6;
 * @return {!Array<!proto.master_pb.DataCenterInfo>}
 */
proto.master_pb.TopologyInfo.prototype.getDataCenterInfosList = function() {
  return /** @type{!Array<!proto.master_pb.DataCenterInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.DataCenterInfo, 6));
};


/** @param {!Array<!proto.master_pb.DataCenterInfo>} value */
proto.master_pb.TopologyInfo.prototype.setDataCenterInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.master_pb.DataCenterInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.DataCenterInfo}
 */
proto.master_pb.TopologyInfo.prototype.addDataCenterInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.master_pb.DataCenterInfo, opt_index);
};


proto.master_pb.TopologyInfo.prototype.clearDataCenterInfosList = function() {
  this.setDataCenterInfosList([]);
};


/**
 * optional uint64 remote_volume_count = 7;
 * @return {number}
 */
proto.master_pb.TopologyInfo.prototype.getRemoteVolumeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.master_pb.TopologyInfo.prototype.setRemoteVolumeCount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.VolumeListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.VolumeListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.VolumeListRequest.displayName = 'proto.master_pb.VolumeListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.VolumeListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.VolumeListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.VolumeListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.VolumeListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.VolumeListRequest}
 */
proto.master_pb.VolumeListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.VolumeListRequest;
  return proto.master_pb.VolumeListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.VolumeListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.VolumeListRequest}
 */
proto.master_pb.VolumeListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.VolumeListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.VolumeListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.VolumeListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.VolumeListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.VolumeListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.VolumeListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.VolumeListResponse.displayName = 'proto.master_pb.VolumeListResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.VolumeListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.VolumeListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.VolumeListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.VolumeListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    topologyInfo: (f = msg.getTopologyInfo()) && proto.master_pb.TopologyInfo.toObject(includeInstance, f),
    volumeSizeLimitMb: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.VolumeListResponse}
 */
proto.master_pb.VolumeListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.VolumeListResponse;
  return proto.master_pb.VolumeListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.VolumeListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.VolumeListResponse}
 */
proto.master_pb.VolumeListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.master_pb.TopologyInfo;
      reader.readMessage(value,proto.master_pb.TopologyInfo.deserializeBinaryFromReader);
      msg.setTopologyInfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolumeSizeLimitMb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.VolumeListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.VolumeListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.VolumeListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.VolumeListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopologyInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.master_pb.TopologyInfo.serializeBinaryToWriter
    );
  }
  f = message.getVolumeSizeLimitMb();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional TopologyInfo topology_info = 1;
 * @return {?proto.master_pb.TopologyInfo}
 */
proto.master_pb.VolumeListResponse.prototype.getTopologyInfo = function() {
  return /** @type{?proto.master_pb.TopologyInfo} */ (
    jspb.Message.getWrapperField(this, proto.master_pb.TopologyInfo, 1));
};


/** @param {?proto.master_pb.TopologyInfo|undefined} value */
proto.master_pb.VolumeListResponse.prototype.setTopologyInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.master_pb.VolumeListResponse.prototype.clearTopologyInfo = function() {
  this.setTopologyInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.master_pb.VolumeListResponse.prototype.hasTopologyInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 volume_size_limit_mb = 2;
 * @return {number}
 */
proto.master_pb.VolumeListResponse.prototype.getVolumeSizeLimitMb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.master_pb.VolumeListResponse.prototype.setVolumeSizeLimitMb = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.LookupEcVolumeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.LookupEcVolumeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.LookupEcVolumeRequest.displayName = 'proto.master_pb.LookupEcVolumeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.LookupEcVolumeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.LookupEcVolumeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.LookupEcVolumeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.LookupEcVolumeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    volumeId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.LookupEcVolumeRequest}
 */
proto.master_pb.LookupEcVolumeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.LookupEcVolumeRequest;
  return proto.master_pb.LookupEcVolumeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.LookupEcVolumeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.LookupEcVolumeRequest}
 */
proto.master_pb.LookupEcVolumeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVolumeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.LookupEcVolumeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.LookupEcVolumeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.LookupEcVolumeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.LookupEcVolumeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVolumeId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 volume_id = 1;
 * @return {number}
 */
proto.master_pb.LookupEcVolumeRequest.prototype.getVolumeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.master_pb.LookupEcVolumeRequest.prototype.setVolumeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.LookupEcVolumeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.LookupEcVolumeResponse.repeatedFields_, null);
};
goog.inherits(proto.master_pb.LookupEcVolumeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.LookupEcVolumeResponse.displayName = 'proto.master_pb.LookupEcVolumeResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.LookupEcVolumeResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.LookupEcVolumeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.LookupEcVolumeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.LookupEcVolumeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.LookupEcVolumeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    volumeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    shardIdLocationsList: jspb.Message.toObjectList(msg.getShardIdLocationsList(),
    proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.LookupEcVolumeResponse}
 */
proto.master_pb.LookupEcVolumeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.LookupEcVolumeResponse;
  return proto.master_pb.LookupEcVolumeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.LookupEcVolumeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.LookupEcVolumeResponse}
 */
proto.master_pb.LookupEcVolumeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVolumeId(value);
      break;
    case 2:
      var value = new proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation;
      reader.readMessage(value,proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.deserializeBinaryFromReader);
      msg.addShardIdLocations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.LookupEcVolumeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.LookupEcVolumeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.LookupEcVolumeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.LookupEcVolumeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVolumeId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getShardIdLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.repeatedFields_, null);
};
goog.inherits(proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.displayName = 'proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    locationsList: jspb.Message.toObjectList(msg.getLocationsList(),
    proto.master_pb.Location.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation}
 */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation;
  return proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation}
 */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShardId(value);
      break;
    case 2:
      var value = new proto.master_pb.Location;
      reader.readMessage(value,proto.master_pb.Location.deserializeBinaryFromReader);
      msg.addLocations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.master_pb.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 shard_id = 1;
 * @return {number}
 */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.prototype.getShardId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.prototype.setShardId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Location locations = 2;
 * @return {!Array<!proto.master_pb.Location>}
 */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.prototype.getLocationsList = function() {
  return /** @type{!Array<!proto.master_pb.Location>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.Location, 2));
};


/** @param {!Array<!proto.master_pb.Location>} value */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.prototype.setLocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.master_pb.Location=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.Location}
 */
proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.prototype.addLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.master_pb.Location, opt_index);
};


proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation.prototype.clearLocationsList = function() {
  this.setLocationsList([]);
};


/**
 * optional uint32 volume_id = 1;
 * @return {number}
 */
proto.master_pb.LookupEcVolumeResponse.prototype.getVolumeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.master_pb.LookupEcVolumeResponse.prototype.setVolumeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated EcShardIdLocation shard_id_locations = 2;
 * @return {!Array<!proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation>}
 */
proto.master_pb.LookupEcVolumeResponse.prototype.getShardIdLocationsList = function() {
  return /** @type{!Array<!proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation, 2));
};


/** @param {!Array<!proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation>} value */
proto.master_pb.LookupEcVolumeResponse.prototype.setShardIdLocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation}
 */
proto.master_pb.LookupEcVolumeResponse.prototype.addShardIdLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.master_pb.LookupEcVolumeResponse.EcShardIdLocation, opt_index);
};


proto.master_pb.LookupEcVolumeResponse.prototype.clearShardIdLocationsList = function() {
  this.setShardIdLocationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.GetMasterConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.GetMasterConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.GetMasterConfigurationRequest.displayName = 'proto.master_pb.GetMasterConfigurationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.GetMasterConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.GetMasterConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.GetMasterConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.GetMasterConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.GetMasterConfigurationRequest}
 */
proto.master_pb.GetMasterConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.GetMasterConfigurationRequest;
  return proto.master_pb.GetMasterConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.GetMasterConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.GetMasterConfigurationRequest}
 */
proto.master_pb.GetMasterConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.GetMasterConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.GetMasterConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.GetMasterConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.GetMasterConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.GetMasterConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.GetMasterConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.GetMasterConfigurationResponse.displayName = 'proto.master_pb.GetMasterConfigurationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.GetMasterConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.GetMasterConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.GetMasterConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.GetMasterConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metricsAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    metricsIntervalSeconds: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.GetMasterConfigurationResponse}
 */
proto.master_pb.GetMasterConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.GetMasterConfigurationResponse;
  return proto.master_pb.GetMasterConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.GetMasterConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.GetMasterConfigurationResponse}
 */
proto.master_pb.GetMasterConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetricsAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMetricsIntervalSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.GetMasterConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.GetMasterConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.GetMasterConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.GetMasterConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetricsAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMetricsIntervalSeconds();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string metrics_address = 1;
 * @return {string}
 */
proto.master_pb.GetMasterConfigurationResponse.prototype.getMetricsAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.GetMasterConfigurationResponse.prototype.setMetricsAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 metrics_interval_seconds = 2;
 * @return {number}
 */
proto.master_pb.GetMasterConfigurationResponse.prototype.getMetricsIntervalSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.master_pb.GetMasterConfigurationResponse.prototype.setMetricsIntervalSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.ListMasterClientsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.master_pb.ListMasterClientsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.ListMasterClientsRequest.displayName = 'proto.master_pb.ListMasterClientsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.ListMasterClientsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.ListMasterClientsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.ListMasterClientsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.ListMasterClientsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientType: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.ListMasterClientsRequest}
 */
proto.master_pb.ListMasterClientsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.ListMasterClientsRequest;
  return proto.master_pb.ListMasterClientsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.ListMasterClientsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.ListMasterClientsRequest}
 */
proto.master_pb.ListMasterClientsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.ListMasterClientsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.ListMasterClientsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.ListMasterClientsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.ListMasterClientsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string client_type = 1;
 * @return {string}
 */
proto.master_pb.ListMasterClientsRequest.prototype.getClientType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.master_pb.ListMasterClientsRequest.prototype.setClientType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.master_pb.ListMasterClientsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.master_pb.ListMasterClientsResponse.repeatedFields_, null);
};
goog.inherits(proto.master_pb.ListMasterClientsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.master_pb.ListMasterClientsResponse.displayName = 'proto.master_pb.ListMasterClientsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.master_pb.ListMasterClientsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.master_pb.ListMasterClientsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.master_pb.ListMasterClientsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.master_pb.ListMasterClientsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.ListMasterClientsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    grpcAddressesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.master_pb.ListMasterClientsResponse}
 */
proto.master_pb.ListMasterClientsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.master_pb.ListMasterClientsResponse;
  return proto.master_pb.ListMasterClientsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.master_pb.ListMasterClientsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.master_pb.ListMasterClientsResponse}
 */
proto.master_pb.ListMasterClientsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addGrpcAddresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.master_pb.ListMasterClientsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.master_pb.ListMasterClientsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.master_pb.ListMasterClientsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.master_pb.ListMasterClientsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrpcAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string grpc_addresses = 1;
 * @return {!Array<string>}
 */
proto.master_pb.ListMasterClientsResponse.prototype.getGrpcAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.master_pb.ListMasterClientsResponse.prototype.setGrpcAddressesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.master_pb.ListMasterClientsResponse.prototype.addGrpcAddresses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.master_pb.ListMasterClientsResponse.prototype.clearGrpcAddressesList = function() {
  this.setGrpcAddressesList([]);
};


goog.object.extend(exports, proto.master_pb);
